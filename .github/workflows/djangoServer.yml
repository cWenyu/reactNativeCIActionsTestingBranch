name: Django CI Workflow

on:
  push:
    branches:
      - server
# three job definition
jobs:
  Django-check-job: # health check job for testing and code formatting check
    runs-on: ubuntu-latest # os for running the job
    # services:
    #   postgres: # we need a postgres docker image to be booted a side car service to run the tests that needs a db
    #     image: postgres
    #     env: # the environment variable must match with app/settings.py if block of DATBASES variable otherwise test will fail due to connectivity issue.
    #       POSTGRES_USER: postgres
    #       POSTGRES_PASSWORD: postgres
    #       POSTGRES_DB: github-actions
    #     ports:
    #       - 5432:5432 # exposing 5432 port for application to use
    #     # needed because the postgres container does not provide a healthcheck
    #     options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code # checking our the code at current commit that triggers the workflow
        uses: actions/checkout@v2
        with:
          ref: server
      - name: Cache dependency # caching dependency will make our build faster.
        uses: actions/cache@v2 # for more info checkout pip section documentation at https://github.com/actions/cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Setup python environment # setting python environment to 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.7.8' # if you want multiple python version run just use matrix strategy in job config. See the documentation of GitHub Actions
      - name: Check Python version # checking the python version to see if 3.x is installed.
        run: python --version
      - name: Install requirements # install application requirements
        run: |
          cd Aquality2
          pip install django-filter
          pip install -r requirements.txt

      # - name: create .env file
      #   uses: finnp/create-file-action@master
      #   env:
      #     FILE_NAME: 'Aquality2/.env'
      #     FILE_DATA: ${{secrets.SERVER_ENV}}

      - name: print secrets
        run: |
          cd Aquality2
          touch .env
          echo $DEV_ENV_FILE | tr ' ' '\n' >> .env
          cat .env
        env:
          DEV_ENV_FILE: ${{ secrets.SERVER_ENV }}
        shell: bash

      - name: Run Migrations # run migrations to create table in side container
        run: |
          FILE=Aquality2/.env
          if [ -f "$FILE" ]; then
              cd Aquality2
        # python manage.py migrate
          else 
              echo "$FILE does not exist."
          fi

      - name: Run Test # running tests
        run: |
          cd Aquality2  
          python manage.py test
